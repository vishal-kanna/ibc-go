(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{651:function(l,G,c){"use strict";c.r(G);var b=c(1),Z=Object(b.a)({},(function(){var l=this,G=l.$createElement,c=l._self._c||G;return c("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[c("h1",{attrs:{id:"scaffold-for-ics20-callback-middleware"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#scaffold-for-ics20-callback-middleware"}},[l._v("#")]),l._v(" Scaffold for ICS20 Callback Middleware")]),l._v(" "),c("p",[l._v("The following is a very simple scaffold for middleware that implements actor callbacks for transfer channels. Since a channel does not need to be owned by a single actor, the handshake callbacks are no-ops. The packet callbacks will call into the relevant actor. For "),c("code",[l._v("OnRecvPacket")]),l._v(", this will be "),c("code",[l._v("data.Receiver")]),l._v(", and for "),c("code",[l._v("OnAcknowledgePacket")]),l._v(" and "),c("code",[l._v("OnTimeoutPacket")]),l._v(" this will be "),c("code",[l._v("data.Sender")]),l._v(".")]),l._v(" "),c("p",[l._v("The exact nature of the callbacks to the smart contract will depend on the environment in question (e.g. cosmwasm, evm). Thus the place where the callbacks to the smart contract are stubbed out and commented so that it can be completed by implementers for the specific environment they are targetting.")]),l._v(" "),c("p",[l._v("Implementers may wish to support callbacks to more IBC applications by adding a switch statement to unmarshal the specific packet data types they wish to support and passing them into the smart contract callback functions.")]),l._v(" "),c("h3",{attrs:{id:"scaffold-middleware"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#scaffold-middleware"}},[l._v("#")]),l._v(" Scaffold Middleware")]),l._v(" "),c("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:""}})],1)}),[],!1,null,null,null);G.default=Z.exports}}]);