syntax = "proto3";

package ibc.applications.interchain_accounts.controller.v1;

option go_package = "github.com/cosmos/ibc-go/v7/modules/apps/27-interchain-accounts/controller/types";

import "gogoproto/gogo.proto";
import "ibc/applications/interchain_accounts/v1/packet.proto";
import "ibc/applications/interchain_accounts/controller/v1/controller.proto";

// Msg defines the 27-interchain-accounts/controller Msg service.
service Msg {
  // RegisterInterchainAccount defines a rpc handler for MsgRegisterInterchainAccount.
  rpc RegisterInterchainAccount(MsgRegisterInterchainAccount) returns (MsgRegisterInterchainAccountResponse);
  // SendTx defines a rpc handler for MsgSendTx.
  rpc SendTx(MsgSendTx) returns (MsgSendTxResponse);
  //UpdateParams defines a rpc handler for MsgUpdateParams.
  rpc UpdateParams(MsgUpdateParams)returns (MsgUpdateParamsResponse);
}

// MsgRegisterInterchainAccount defines the payload for Msg/RegisterAccount
message MsgRegisterInterchainAccount {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string owner         = 1;
  string connection_id = 2;
  string version       = 3;
}

// MsgRegisterInterchainAccountResponse defines the response for Msg/RegisterAccount
message MsgRegisterInterchainAccountResponse {
  string channel_id = 1;
  string port_id    = 2;
}

// MsgSendTx defines the payload for Msg/SendTx
message MsgSendTx {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string                                                              owner         = 1;
  string                                                              connection_id = 2;
  ibc.applications.interchain_accounts.v1.InterchainAccountPacketData packet_data   = 3 [(gogoproto.nullable) = false];
  // Relative timeout timestamp provided will be added to the current block time during transaction execution.
  // The timeout timestamp must be non-zero.
  uint64 relative_timeout = 4;
}

// MsgSendTxResponse defines the response for MsgSendTx
message MsgSendTxResponse {
  uint64 sequence = 1;
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1;

  // params defines the transfer parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}